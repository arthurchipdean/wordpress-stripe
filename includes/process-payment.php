<?php
function spire_stripe_process_payment() {
    if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {

        global $stripe_options;

        // load the stripe libraries
        require_once(STRIPE_BASE_DIR . '/lib/Stripe.php');

        // retrieve the token generated by stripe.js
        $token = $_POST['stripeToken'];

        // check if we are using test mode
        if(isset($stripe_options['test_mode']) && $stripe_options['test_mode']) {
            $secret_key = $stripe_options['test_secret_key'];
        } else {
            $secret_key = $stripe_options['live_secret_key'];
        }

        // attempt to charge the customer's card
        try {
            //Multiply by 100 to remove decimal
            $amount = $_POST['amount']*100;
            Stripe::setApiKey($secret_key);
            $charge = Stripe_Charge::create(array(
                    'amount' => $amount,
                    'currency' => 'usd',
                    'card' => $token,
                    'description' => $_POST['email']
                )
            );


            // redirect on successful payment
            $redirect = add_query_arg('payment', 'paid', $_POST['redirect']);

        } catch (Exception $e) {
            // redirect on failed payment
            $redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
        }

        // redirect back to our previous page with the added query variable
        wp_redirect($redirect); exit;
    }
}
add_action('init', 'spire_stripe_process_payment');